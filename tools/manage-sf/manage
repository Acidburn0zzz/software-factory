#!/usr/bin/env python

import argparse
import os
import sys
import yaml

from managesf import managesf as msf
from redmine import Redmine

JJB_INIT_PATH = '../../data/jjb/'

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Manage SF')
    parser.add_argument('--action',
                        help='init-repo | delete-repo | init-config-repo')
    parser.add_argument('--config',
                        help='config file')
    parser.add_argument('--project',
                        help='project config file')

    args = parser.parse_args()

    assert args.config

    # parse manage sf configuration file
    sf_yaml = yaml.load(file(args.config))
    sf_gerrit = [e for e in sf_yaml if
                 e.keys()[0] == 'gerrit'][0]['gerrit']
    sf_redmine = [e for e in sf_yaml if
                  e.keys()[0] == 'redmine'][0]['redmine']
    sf_jenkins = [e for e in sf_yaml if
                  e.keys()[0] == 'jenkins'][0]['jenkins']
    keyfile = sf_gerrit['sshkey-priv-path']
    jenkins_keyfile = sf_jenkins['sshkey-priv-path']
    adminuser = sf_gerrit['admin']
    adminemail = sf_gerrit['admin-email']
    gerrithost = sf_gerrit['host']
    jenkinshost = sf_jenkins['host']
    redminehost = 'http://' + sf_redmine['host']
    redmineapikey = sf_redmine['apikey']
    redmineversion = sf_redmine['version']

    gerrit_client = msf.CustomGerritClient(gerrithost,
                                           adminuser,
                                           keyfile=keyfile)

    redmine_client = Redmine(redminehost,
                             redmineapikey,
                             version=redmineversion)

    infos = {'gerrit-host': gerrithost,
             'gerrit-host-port': '29418',
             'gerrit-keyfile': keyfile,
             'admin': adminuser,
             'email': adminemail,
             }

    if not args.action:
        sys.exit(1)

    if args.action == 'init-repo' or args.action == 'delete-repo':
        assert args.project
        # parse project configuration file
        project_yaml = yaml.load(file(args.project))
        infos['name'] = project_yaml['name']
        infos['description'] = project_yaml['description']
        infos['private'] = project_yaml['private']
        try:
            infos['upstream'] = project_yaml['upstream']
        except KeyError:
            pass
        infos['core-group'] = '%s-core' % infos['name']
        infos['ptl-group'] = '%s-ptl' % infos['name']
        for k_group_members in ('ptl-group-members', 'core-group-members'):
            try:
                infos[k_group_members] = project_yaml[k_group_members]
            except KeyError:
                print "Nobody specified in %s" % k_group_members
        if infos['private'] is True:
            infos['dev-group'] = '%s-dev' % infos['name']
            infos['dev-group-members'] = project_yaml['dev-group-members']

    if args.action == 'init-config-repo':
        infos['name'] = 'config'
        infos['description'] = 'Config repository'
        infos['jenkins-host'] = jenkinshost
        infos['jenkins-privkey'] = jenkins_keyfile
        infos['core-group'] = '%s-core' % infos['name']
        infos['ptl-group'] = '%s-ptl' % infos['name']

    print "Using private key : %s" % keyfile
    print "Using username : %s" % adminuser
    print "Using email : %s" % adminemail
    print "Using gerrit hostname : %s" % gerrithost
    print "Using redmine hostname : %s" % redminehost
    print "Using redmine API key : %s" % redmineapikey
    print "Using redmine version : %s" % redmineversion
    print ""
    print "Will create project : %s" % infos['name']
    print "Project description : %s" % infos['description']

    if args.action == 'init-repo':
        project_list = gerrit_client.listProjects()
        if infos['name'] in project_list:
            print "Project '%s' already exist" % infos['name']
            sys.exit(1)
        try:
            print "Create project %s" % infos['name']
            msf.init_gerrit_project(gerrit_client, infos)
            print "Create project on Redmine %s" % infos['name']
            msf.init_redmine_project(redmine_client, infos)
        except Exception as e:
            print "ERROR:Creating project %s is failed" % infos['name']
            print "Error Msg:\n", e
    elif args.action == 'delete-repo':
        print "Delete project %s on gerrit" % infos['name']
        msf.delete_gerrit_project(gerrit_client, infos)
        print "Delete project %s on Redmine" % infos['name']
        msf.delete_redmine_project(redmine_client, infos)
    elif args.action == 'init-config-repo':
        project_list = gerrit_client.listProjects()
        if infos['name'] in project_list:
            print "Project '%s' already exist" % infos['name']
            sys.exit(1)
        print "Create special project %s" % infos['name']
        files = os.listdir(JJB_INIT_PATH)
        paths = [os.path.join(JJB_INIT_PATH, f) for f in files]
        try:
            msf.init_gerrit_project(gerrit_client, infos)
            msf.push_dir_in_gerrit_project(infos, 'jobs', paths)
            print "Kick JJB on Jenkins %s" % infos['name']
            msf.jenkins_init_jjb(infos)
            print "Create project on Redmine %s" % infos['name']
            msf.init_redmine_project(redmine_client, infos)
        except Exception as e:
            print "ERROR:Creating special project %s is failed" % infos['name']
            print "Error Msg:\n", e
