heat_template_version: 2013-05-23

description: >
  Heat SoftwareFactory template.

parameters:
  key_name:
    type: string
    description:  Name of a KeyPair to enable SSH access to the instance
  suffix:
    type: string
    description: Domain suffix to the hostnames
    default: sf.dom
  jenkins_master_url:
    type: string
    description: url/hostname(without http://) of jenkins master node to which slave connects 
    default: tests-jenkins
  jenkins_user_pwd:
    type: string
    description: jenkins user password, jenkins slave has to provide this password to connect to master
    default: userpass
  temp_ssh_pwd:
    type: string
    description: Used temporary to trigger puppet agents on each node
    default: heat
  instance_type:
    type: string
    description: Instance type for sf roles (ldap, commonservices, managesf)
  alt_instance_type:
    type: string
    description: Instance type for sf roles (mysql, gerrit, jenkins, redmine, puppetmaster)
  puppetmaster_image_id:
    type: string
    description: Glance image ID for the puppet master node
  ldap_image_id:
    type: string
    description: Glance image ID for the ldap node
  mysql_image_id:
    type: string
    description: Glance image ID for the mysql node
  slave_image_id:
    type: string
    description: Glance image ID for the slave node
  sf_image_id:
    type: string
    description: Glance image ID for all the other sf nodes
  floating_ip_pool_name:
    type: string
    description: The name of floating IP pool

resources:
  jenkins_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: floating_ip_pool_name }
  
  redmine_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: floating_ip_pool_name }
  
  gerrit_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: floating_ip_pool_name }
  
  managesf_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: floating_ip_pool_name }
  
  puppetmaster_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: floating_ip_pool_name }

  associate_public_ip_to_jenkins_instance:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: {get_resource: jenkins_floating_ip}
      server_id: {get_resource: jenkins_instance}
  
  associate_public_ip_to_redmine_instance:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: {get_resource: redmine_floating_ip}
      server_id: {get_resource: redmine_instance}
  
  associate_public_ip_to_gerrit_instance:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: {get_resource: gerrit_floating_ip}
      server_id: {get_resource: gerrit_instance}

  associate_public_ip_to_managesf_instance:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: {get_resource: managesf_floating_ip}
      server_id: {get_resource: managesf_instance}
  
  associate_public_ip_to_puppetmaster_instance:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: {get_resource: puppetmaster_floating_ip}
      server_id: {get_resource: puppetmaster_instance}

  puppetmaster_instance:
    type: OS::Nova::Server
    depends_on: [ commonservices_instance, managesf_instance, gerrit_instance, jenkins_instance, redmine_instance, ldap_instance, mysql_instance, slave_instance ]
    properties:
      image: { get_param: puppetmaster_image_id }
      flavor: { get_param: alt_instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: puppetmaster
            fqdn: puppetmaster.SF_SUFFIX
            disable_root: 0
            write_files:
            - content: |
                hosts:
                  localhost:
                    ip: 127.0.0.1
                  puppetmaster.SF_SUFFIX:
                    ip: puppermaster-ip-template
                    host_aliases: [puppetmaster]
                  ldap.SF_SUFFIX:
                    ip: ldap_host
                    host_aliases: [ldap]
                  mysql.SF_SUFFIX:
                    ip: mysql_host
                    host_aliases: [mysql]
                  jenkins.SF_SUFFIX:
                    ip: jenkins_host
                    host_aliases: [jenkins]
                  redmine.SF_SUFFIX:
                    ip: redmine_host
                    host_aliases: [redmine]
                  gerrit.SF_SUFFIX:
                    ip: gerrit_host
                    host_aliases: [gerrit]
                  managesf.SF_SUFFIX:
                    ip: managesf_host
                    host_aliases: [managesf, auth.SF_SUFFIX]
                  commonservices.SF_SUFFIX:
                    ip: commonservices_host
                    host_aliases: [commonservices]
              path: /root/hosts.yaml
            runcmd:
              - /etc/init.d/puppetmaster stop
              - MY_PRIV_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4 | cut -d, -f1`
              - sed -i "s/puppermaster-ip-template/$MY_PRIV_IP/" /root/hosts.yaml
              - echo "127.0.0.1 puppetmaster.SF_SUFFIX puppetmaster" > /etc/hosts
              - echo "ldap_host ldap.SF_SUFFIX ldap" >> /etc/hosts
              - echo "mysql_host mysql.SF_SUFFIX mysql" >> /etc/hosts
              - echo "jenkins_host jenkins.SF_SUFFIX jenkins" >> /etc/hosts
              - echo "redmine_host redmine.SF_SUFFIX redmine" >> /etc/hosts
              - echo "gerrit_host gerrit.SF_SUFFIX gerrit" >> /etc/hosts
              - echo "managesf_host managesf.SF_SUFFIX auth.SF_SUFFIX managesf" >> /etc/hosts
              - echo "commonservices_host commonservices.SF_SUFFIX commonservices" >> /etc/hosts
              - tar -xzf /root/puppet-bootstrapper.tar.gz -C /root/
              - cd /root/puppet-bootstrapper
              - ./config_puppetmaster.sh > /var/log/sf-bootstrap.log 2>&1
              - HOME=/root/ TEMP_SSH_PWD=SSHPASS SFSUFFIX=SF_SUFFIX ./bootstrap.sh > /var/log/sf-bootstrap.log 2>&1
          params:
            jenkins_host: { get_attr: [jenkins_instance, first_address] }
            redmine_host: { get_attr: [redmine_instance, first_address] }
            gerrit_host: { get_attr: [gerrit_instance, first_address] }
            managesf_host: { get_attr: [managesf_instance, first_address] }
            commonservices_host: { get_attr: [commonservices_instance, first_address] }
            ldap_host: { get_attr: [ldap_instance, first_address] }
            mysql_host: { get_attr: [mysql_instance, first_address] }
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }

  jenkins_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: sf_image_id }
      flavor: { get_param: alt_instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: jenkins
            fqdn: jenkins.SF_SUFFIX
            disable_root: 0
            runcmd:
              - /etc/init.d/puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }
  
  redmine_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: sf_image_id }
      flavor: { get_param: alt_instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: redmine
            fqdn: redmine.SF_SUFFIX
            disable_root: 0
            runcmd:
              - /etc/init.d/puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }
  
  gerrit_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: sf_image_id }
      flavor: { get_param: alt_instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: gerrit
            fqdn: gerrit.SF_SUFFIX
            disable_root: 0
            runcmd:
              - /etc/init.d/puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }
  
  commonservices_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: sf_image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: commonservices
            fqdn: commonservices.SF_SUFFIX
            disable_root: 0
            runcmd:
              - /etc/init.d/puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }
  
  managesf_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: sf_image_id }
      flavor: { get_param: alt_instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: managesf
            fqdn: managesf.SF_SUFFIX
            disable_root: 0
            runcmd:
              - /etc/init.d/puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }
  
  ldap_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: ldap_image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: ldap
            fqdn: ldap.SF_SUFFIX
            disable_root: 0
            write_files:
            - content: |
                dn: olcDatabase={-1}frontend,cn=config
                add: olcRequires
                olcRequires: authc
              path: /root/disable_anon_frontend.ldif
            - content: |
                dn: olcDatabase={1}hdb,cn=config
                add: olcRequires
                olcRequires: authc
              path: /root/disable_anon_backend.ldif
            - content: |
                dn: ou=Users,dc=example,dc=com
                objectClass: organizationalUnit
                ou: Users
              path: /root/users_ou.ldif
            - content: |
                dn: cn=user1,ou=Users,dc=example,dc=com
                cn: user1
                objectClass: person
                sn: Demo user1
                userPassword: userpass
                mail: user1@example.com
                objectClass: inetOrgPerson

                dn: cn=user2,ou=Users,dc=example,dc=com
                cn: user2
                objectClass: person
                sn: Demo user2
                userPassword: userpass
                mail: user2@example.com
                objectClass: inetOrgPerson

                dn: cn=user3,ou=Users,dc=example,dc=com
                cn: user3
                objectClass: person
                sn: Demo user3
                userPassword: userpass
                mail: user3@example.com
                objectClass: inetOrgPerson

                dn: cn=user4,ou=Users,dc=example,dc=com
                cn: user4
                objectClass: person
                sn: Demo user4
                userPassword: userpass
                mail: user4@example.com
                objectClass: inetOrgPerson

                dn: cn=jenkins,ou=Users,dc=example,dc=com
                cn: jenkins
                objectClass: person
                sn: Jenkins
                userPassword: userpass
                mail: jenkins@example.com
                objectClass: inetOrgPerson
              path: /root/demo_users.ldif
            - content: |
                dn: ou=Groups,dc=example,dc=com
                objectClass: organizationalUnit
                ou: Groups
              path: /root/groups_ou.ldif
            - content: |
                dn: cn=group01,ou=Groups,dc=example,dc=com
                cn: group01
                objectClass: organizationalRole
                roleOccupant: cn=user1,dc=example,dc=com
                roleOccupant: cn=user2,dc=example,dc=com

                dn: cn=group02,ou=Groups,dc=example,dc=com
                cn: group02
                objectClass: organizationalRole
                roleOccupant: cn=user1,dc=example,dc=com
                roleOccupant: cn=user3,dc=example,dc=com
              path: /root/groups.ldif
            runcmd:
              - /etc/init.d/puppet stop
              - ldapadd -x -D cn=admin,dc=example,dc=com -w secret -f /root/users_ou.ldif
              - ldapadd -x -D cn=admin,dc=example,dc=com -w secret -f /root/demo_users.ldif
              - ldapadd -x -D cn=admin,dc=example,dc=com -w secret -f /root/groups_ou.ldif
              - ldapadd -x -D cn=admin,dc=example,dc=com -w secret -f /root/groups.ldif
              - ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /root/disable_anon_frontend.ldif
              - ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /root/disable_anon_backend.ldif
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }
  
  mysql_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: mysql_image_id }
      flavor: { get_param: alt_instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: mysql
            fqdn: mysql.SF_SUFFIX
            disable_root: 0
            runcmd:
              - /etc/init.d/puppet stop
              - echo puppetmaster-ip-template puppetmaster.SF_SUFFIX >> /etc/hosts
              - sed -i -e '0,/^$/s/^$/server=puppetmaster.SF_SUFFIX\n/g' /etc/puppet/puppet.conf
              - /bin/echo -e "\n[agent]\nenvironment=sf" >> /etc/puppet/puppet.conf
              - echo "root:SSHPASS" | chpasswd
          params:
            SF_SUFFIX: { get_param: suffix }
            SSHPASS: { get_param: temp_ssh_pwd }
  
  slave_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: slave_image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            output: {all: '| tee -a /var/log/cloud-init-output.log'}
            hostname: slave
            fqdn: slave.SF_SUFFIX
            disable_root: 0
            groups:
              - jenkins: [jenkins]
            users:
              - name: jenkins
                primary-group: jenkins
                lock-passwd: false
                plain_text_passwd: JENKINS_USER_PASSWORD
                homedir: /var/lib/jenkins
            runcmd:
             - chown jenkins /var/lib/jenkins /var/lib/jenkins/plugins
             - nohup sudo -u jenkins -i java -jar /var/lib/jenkins/swarm-client-1.15-jar-with-dependencies.jar -master http://JENKINS_MASTER_URL:8080 -username jenkins -password JENKINS_USER_PASSWORD -name slave > /dev/null 2>&1 & echo $!
          params:
            SF_SUFFIX: { get_param: suffix }
            JENKINS_MASTER_URL: { get_param: jenkins_master_url }
            JENKINS_USER_PASSWORD: { get_param: jenkins_user_pwd }


outputs:
  jenkins_public_address:
    description: Public address of Jenkins
    value:
      str_replace:
        template: "Public address of the Jenkins instance: host"
        params:
          host: { get_attr: [jenkins_floating_ip, ip] }
  gerrit_public_address:
    description: Public address of Gerrit
    value:
      str_replace:
        template: "Public address of the Gerrit instance: host"
        params:
          host: { get_attr: [gerrit_floating_ip, ip] }
  redmine_public_address:
    description: Public address of Redmine
    value:
      str_replace:
        template: "Public address of the Redmine instance: host"
        params:
          host: { get_attr: [redmine_floating_ip, ip] }
  managesf_public_address:
    description: Public address of Managesf
    value:
      str_replace:
        template: "Public address of the Managesf instance: host"
        params:
          host: { get_attr: [managesf_floating_ip, ip] }

